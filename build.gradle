buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }

}


plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.51'
}

group 'io.rudolph.netatmo'
version '0.2.0'

repositories {
    mavenCentral()
}


apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.4'
    compile 'io.github.microutils:kotlin-logging:1.5.4'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.4.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.4.0'
    compile('com.fasterxml.jackson.core:jackson-core:2.9.6') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.6'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6"
    compile 'com.squareup.okhttp3:okhttp:3.11.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    testImplementation 'junit:junit:4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    version = version
    exclude('credentials*.json')
    exclude('/apiresults')

    manifest {
        attributes 'NetatmoApi': 'app.MainKt'
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task customFatJar(type: Jar) {

    manifest {
        attributes 'NetatmoApi': 'app.MainKt'
    }
    from("$projectDir") {
        include 'lib/**'
    }

    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}