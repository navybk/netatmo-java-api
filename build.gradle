buildscript {

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

group 'io.rudolph.netatmo'
version '0.4.6'

repositories {
    mavenCentral()
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.dokka'

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.72'
    implementation 'io.github.microutils:kotlin-logging:1.7.9'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation('com.fasterxml.jackson.core:jackson-core:2.11.0') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.0"
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'
    testImplementation 'junit:junit:4.12'
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    version = version
    exclude('credentials*.json')
    exclude('/apiresults')

    manifest {
        attributes 'NetatmoApi': 'app.MainKt'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task customFatJar(type: Jar) {

    manifest {
        attributes 'NetatmoApi': 'app.MainKt'
    }

    baseName = project.name

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${projectDir}/out/test/classes/apitest/"
}
processTestResources.dependsOn copyTestResources